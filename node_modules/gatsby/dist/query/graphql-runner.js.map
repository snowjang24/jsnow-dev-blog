{"version":3,"sources":["../../src/query/graphql-runner.js"],"names":["graphql","require","withResolverContext","LocalNodeModel","GraphQLRunner","constructor","store","nodeStore","createPageDependency","schema","schemaCustomization","getState","nodeModel","schemaComposer","composer","query","context","customContext","module","exports"],"mappings":";;AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAcC,OAAO,CAAE,SAAF,CAA3B;;AAEA,MAAMC,mBAAmB,GAAGD,OAAO,CAAE,mBAAF,CAAnC;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAqBF,OAAO,CAAE,sBAAF,CAAlC;;AAEA,MAAMG,aAAN,CAAoB;AAClBC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,SAAKA,KAAL,GAAaA,KAAb;;AACA,UAAMC,SAAS,GAAGN,OAAO,CAAE,aAAF,CAAzB;;AACA,UAAMO,oBAAoB,GAAGP,OAAO,CAAE,sCAAF,CAApC;;AACA,UAAM;AAAEQ,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAkC,KAAKJ,KAAL,CAAWK,QAAX,EAAxC;AAEA,SAAKC,SAAL,GAAiB,IAAIT,cAAJ,CAAmB;AAClCI,MAAAA,SADkC;AAElCE,MAAAA,MAFkC;AAGlCI,MAAAA,cAAc,EAAEH,mBAAmB,CAACI,QAHF;AAIlCN,MAAAA;AAJkC,KAAnB,CAAjB;AAMD;;AAEDO,EAAAA,KAAK,CAACA,KAAD,EAAQC,OAAR,EAAiB;AACpB,UAAM;AAAEP,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAkC,KAAKJ,KAAL,CAAWK,QAAX,EAAxC;AAEA,WAAOX,OAAO,CACZS,MADY,EAEZM,KAFY,EAGZC,OAHY,EAIZd,mBAAmB,CAAC;AAClBO,MAAAA,MADkB;AAElBI,MAAAA,cAAc,EAAEH,mBAAmB,CAACI,QAFlB;AAGlBE,MAAAA,OAHkB;AAIlBC,MAAAA,aAAa,EAAEP,mBAAmB,CAACM,OAJjB;AAKlBJ,MAAAA,SAAS,EAAE,KAAKA;AALE,KAAD,CAJP,EAWZI,OAXY,CAAd;AAaD;;AA/BiB;;AAkCpBE,MAAM,CAACC,OAAP,GAAiBf,aAAjB","sourcesContent":["const { graphql } = require(`graphql`)\n\nconst withResolverContext = require(`../schema/context`)\nconst { LocalNodeModel } = require(`../schema/node-model`)\n\nclass GraphQLRunner {\n  constructor(store) {\n    this.store = store\n    const nodeStore = require(`../db/nodes`)\n    const createPageDependency = require(`../redux/actions/add-page-dependency`)\n    const { schema, schemaCustomization } = this.store.getState()\n\n    this.nodeModel = new LocalNodeModel({\n      nodeStore,\n      schema,\n      schemaComposer: schemaCustomization.composer,\n      createPageDependency,\n    })\n  }\n\n  query(query, context) {\n    const { schema, schemaCustomization } = this.store.getState()\n\n    return graphql(\n      schema,\n      query,\n      context,\n      withResolverContext({\n        schema,\n        schemaComposer: schemaCustomization.composer,\n        context,\n        customContext: schemaCustomization.context,\n        nodeModel: this.nodeModel,\n      }),\n      context\n    )\n  }\n}\n\nmodule.exports = GraphQLRunner\n"],"file":"graphql-runner.js"}