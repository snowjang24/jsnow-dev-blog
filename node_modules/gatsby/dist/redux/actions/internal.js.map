{"version":3,"sources":["../../../src/redux/actions/internal.js"],"names":["actions","createPageDependency","path","nodeId","connection","plugin","type","payload","deleteComponentsDependencies","paths","replaceComponentQuery","query","componentPath","replaceStaticQuery","args","queryExtracted","traceId","queryExtractionGraphQLError","error","queryExtractedBabelSuccess","queryExtractionBabelError","setProgramStatus","status","pageQueryRun","isPage","module","exports"],"mappings":"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","sourcesContent":["// @flow\nimport type { Plugin } from \"./types\"\n\nconst actions = {}\n\n/**\n * Create a dependency between a page and data. Probably for\n * internal use only.\n * @param {Object} $0\n * @param {string} $0.path the path to the page\n * @param {string} $0.nodeId A node ID\n * @param {string} $0.connection A connection type\n * @private\n */\nactions.createPageDependency = (\n  {\n    path,\n    nodeId,\n    connection,\n  }: { path: string, nodeId: string, connection: string },\n  plugin: string = ``\n) => {\n  return {\n    type: `CREATE_COMPONENT_DEPENDENCY`,\n    plugin,\n    payload: {\n      path,\n      nodeId,\n      connection,\n    },\n  }\n}\n\n/**\n * Delete dependencies between an array of pages and data. Probably for\n * internal use only. Used when deleting pages.\n * @param {Array} paths the paths to delete.\n * @private\n */\nactions.deleteComponentsDependencies = (paths: string[]) => {\n  return {\n    type: `DELETE_COMPONENTS_DEPENDENCIES`,\n    payload: {\n      paths,\n    },\n  }\n}\n\n/**\n * When the query watcher extracts a GraphQL query, it calls\n * this to store the query with its component.\n * @private\n */\nactions.replaceComponentQuery = ({\n  query,\n  componentPath,\n}: {\n  query: string,\n  componentPath: string,\n}) => {\n  return {\n    type: `REPLACE_COMPONENT_QUERY`,\n    payload: {\n      query,\n      componentPath,\n    },\n  }\n}\n\n/**\n * When the query watcher extracts a \"static\" GraphQL query from <StaticQuery>\n * components, it calls this to store the query with its component.\n * @private\n */\nactions.replaceStaticQuery = (args: any, plugin?: ?Plugin = null) => {\n  return {\n    type: `REPLACE_STATIC_QUERY`,\n    plugin,\n    payload: args,\n  }\n}\n\n/**\n *\n * Report that a query has been extracted from a component. Used by\n * query-compiler.js.\n *\n * @param {Object} $0\n * @param {componentPath} $0.componentPath The path to the component that just had\n * its query read.\n * @param {query} $0.query The GraphQL query that was extracted from the component.\n * @private\n */\nactions.queryExtracted = (\n  { componentPath, query },\n  plugin: Plugin,\n  traceId?: string\n) => {\n  return {\n    type: `QUERY_EXTRACTED`,\n    plugin,\n    traceId,\n    payload: { componentPath, query },\n  }\n}\n\n/**\n *\n * Report that the Relay Compiler found a graphql error when attempting to extract a query\n *\n * @param {Object} $0\n * @param {componentPath} $0.componentPath The path to the component that just had\n * its query read.\n * @param {error} $0.error The GraphQL query that was extracted from the component.\n * @private\n */\nactions.queryExtractionGraphQLError = (\n  { componentPath, error },\n  plugin: Plugin,\n  traceId?: string\n) => {\n  return {\n    type: `QUERY_EXTRACTION_GRAPHQL_ERROR`,\n    plugin,\n    traceId,\n    payload: { componentPath, error },\n  }\n}\n\n/**\n *\n * Report that babel was able to extract the graphql query.\n * Indicates that the file is free of JS errors.\n *\n * @param {Object} $0\n * @param {componentPath} $0.componentPath The path to the component that just had\n * its query read.\n * @private\n */\nactions.queryExtractedBabelSuccess = (\n  { componentPath },\n  plugin: Plugin,\n  traceId?: string\n) => {\n  return {\n    type: `QUERY_EXTRACTION_BABEL_SUCCESS`,\n    plugin,\n    traceId,\n    payload: { componentPath },\n  }\n}\n\n/**\n *\n * Report that the Relay Compiler found a babel error when attempting to extract a query\n *\n * @param {Object} $0\n * @param {componentPath} $0.componentPath The path to the component that just had\n * its query read.\n * @param {error} $0.error The Babel error object\n * @private\n */\nactions.queryExtractionBabelError = (\n  { componentPath, error },\n  plugin: Plugin,\n  traceId?: string\n) => {\n  return {\n    type: `QUERY_EXTRACTION_BABEL_ERROR`,\n    plugin,\n    traceId,\n    payload: { componentPath, error },\n  }\n}\n\n/**\n * Set overall program status e.g. `BOOTSTRAPING` or `BOOTSTRAP_FINISHED`.\n *\n * @param {string} Program status\n * @private\n */\nactions.setProgramStatus = (status, plugin: Plugin, traceId?: string) => {\n  return {\n    type: `SET_PROGRAM_STATUS`,\n    plugin,\n    traceId,\n    payload: status,\n  }\n}\n\n/**\n * Broadcast that a page's query was run.\n *\n * @param {string} Path to the page component that changed.\n * @private\n */\nactions.pageQueryRun = (\n  { path, componentPath, isPage },\n  plugin: Plugin,\n  traceId?: string\n) => {\n  return {\n    type: `PAGE_QUERY_RUN`,\n    plugin,\n    traceId,\n    payload: { path, componentPath, isPage },\n  }\n}\n\nmodule.exports = { actions }\n"],"file":"internal.js"}