{"version":3,"sources":["../../src/redux/nodes.js"],"names":["store","require","getNodes","nodes","getState","Array","from","values","exports","getNode","id","get","getNodesByType","type","nodesByType","getTypes","keys","hasNodeChanged","digest","node","internal","contentDigest","getNodeAndSavePathDependency","path","createPageDependency","nodeId","saveResolvedNodes","nodeTypeNames","resolver","typeName","resolvedNodes","Map","resolved","set","dispatch","payload","key","getNodesAndResolvedNodes","resolvedNodesCache","resolvedNodesIterator","__gatsby_resolved"],"mappings":"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","sourcesContent":["/* @flow */\n\nconst { store } = require(`./index`)\n\n/**\n * Get all nodes from redux store.\n *\n * @returns {Array}\n */\nconst getNodes = () => {\n  const nodes = store.getState().nodes\n  if (nodes) {\n    return Array.from(nodes.values())\n  } else {\n    return []\n  }\n}\n\nexports.getNodes = getNodes\n\n/** Get node by id from store.\n *\n * @param {string} id\n * @returns {Object}\n */\nconst getNode = id => store.getState().nodes.get(id)\n\nexports.getNode = getNode\n\n/**\n * Get all nodes of type from redux store.\n *\n * @param {string} type\n * @returns {Array}\n */\nconst getNodesByType = type => {\n  const nodes = store.getState().nodesByType.get(type)\n  if (nodes) {\n    return Array.from(nodes.values())\n  } else {\n    return []\n  }\n}\n\nexports.getNodesByType = getNodesByType\n\n/**\n * Get all type names from redux store.\n *\n * @returns {Array}\n */\nconst getTypes = () => Array.from(store.getState().nodesByType.keys())\n\nexports.getTypes = getTypes\n\n/**\n * Determine if node has changed.\n *\n * @param {string} id\n * @param {string} digest\n * @returns {boolean}\n */\nexports.hasNodeChanged = (id, digest) => {\n  const node = store.getState().nodes.get(id)\n  if (!node) {\n    return true\n  } else {\n    return node.internal.contentDigest !== digest\n  }\n}\n\n/**\n * Get node and save path dependency.\n *\n * @param {string} id\n * @param {string} path\n * @returns {Object} node\n */\nexports.getNodeAndSavePathDependency = (id, path) => {\n  const createPageDependency = require(`./actions/add-page-dependency`)\n  const node = getNode(id)\n  createPageDependency({ path, nodeId: id })\n  return node\n}\n\nexports.saveResolvedNodes = async (nodeTypeNames, resolver) => {\n  for (const typeName of nodeTypeNames) {\n    const nodes = store.getState().nodesByType.get(typeName)\n    const resolvedNodes = new Map()\n    if (nodes) {\n      for (const node of nodes.values()) {\n        const resolved = await resolver(node)\n        resolvedNodes.set(node.id, resolved)\n      }\n      store.dispatch({\n        type: `SET_RESOLVED_NODES`,\n        payload: {\n          key: typeName,\n          nodes: resolvedNodes,\n        },\n      })\n    }\n  }\n}\n\nconst getNodesAndResolvedNodes = typeName => {\n  const { nodesByType, resolvedNodesCache } = store.getState()\n  const nodes = nodesByType.get(typeName)\n  if (nodes) {\n    const resolvedNodes = resolvedNodesCache.get(typeName)\n    if (resolvedNodes) {\n      return Array.from(resolvedNodesIterator(nodes, resolvedNodes))\n    } else {\n      return Array.from(nodes.values())\n    }\n  } else {\n    return []\n  }\n}\n\nfunction* resolvedNodesIterator(nodes, resolvedNodes) {\n  for (const node of nodes.values()) {\n    node.__gatsby_resolved = resolvedNodes.get(node.id)\n    yield node\n  }\n}\n\nexports.getNodesAndResolvedNodes = getNodesAndResolvedNodes\n"],"file":"nodes.js"}